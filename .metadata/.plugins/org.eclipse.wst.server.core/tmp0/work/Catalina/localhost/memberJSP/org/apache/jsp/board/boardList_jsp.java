/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2020-06-11 03:01:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.ArrayList;
import board.bean.BoardDTO.BoardDTO;
import board.dao.BoardDAO.BoardDAO;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("board.bean.BoardDTO.BoardDTO");
    _jspx_imports_classes.add("board.dao.BoardDAO.BoardDAO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
String memId = (String)session.getAttribute("memId");

request.setCharacterEncoding("UTF-8");
BoardDTO boardDTO = new BoardDTO();
List<BoardDTO> list = new ArrayList<BoardDTO>();
int pg = Integer.parseInt(request.getParameter("pg"));

SimpleDateFormat dateFormat = new SimpleDateFormat ( "yyyy-MM-dd");
SimpleDateFormat timeFormat = new SimpleDateFormat ( "HH시mm분");
// DB
BoardDAO boardDAO = new BoardDAO();
Date today = new Date();
//페이징처리 -1페이지당 5개씩
int endNum = pg*5;
int startNum = endNum-4;
list=boardDAO.boardList(startNum, endNum);

 int totalA = boardDAO.getTotalA(); //총 글수 
 int totalP = (totalA+4)/5;  //더할때는 나누는수 -1을 나눈다


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Board 글목록</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".subjectA:link{color:black;text-decoration:none;}\r\n");
      out.write(".subjectA:visited{color:black; text-decoration:none;}\r\n");
      out.write(".subjectA:hover{color:green; text-decoration:underline;}\r\n");
      out.write(".subjectA:active{color:black; text-decoration:none;}\r\n");
      out.write("#currentPaging{color:red; text-decoration:underline;}\r\n");
      out.write("#paging{color:black; text-decoration:none;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("[글목록] - 게시글 총 ");
      out.print( totalA);
      out.write("개  \r\n");
      out.write("<br>\r\n");
      out.write("오늘 날짜 ");
      out.print(dateFormat.format(today));
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("지금 시간  ");
      out.print(timeFormat.format(today));
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("\t\t\r\n");
      out.write("\t         \r\n");
      out.write("\t\t\t<table  border=\"1\" width=580px cellspacing=0 cellpadding=3 style=table-layout:fixed\r\n");
      out.write("\t\t\tframe=\"hsides\" rules=\"rows\">\r\n");
      out.write("\t\t\t<tr border=1>\r\n");
      out.write("\t         <th align=center width='100'>글번호</th>\r\n");
      out.write("\t         <th align=center width='100'>제목</th>\r\n");
      out.write("\t         <th align=center width='100'>작성자</th>\r\n");
      out.write("\t         <th align=center width='100'>작성일</th>\r\n");
      out.write("\t         <th align=center width='100'>조회수</th>\r\n");
      out.write("\t        </tr>\r\n");
	        if(list!=null){
 	        for (BoardDTO dto : list) {
      out.write("\r\n");
      out.write("\t        <tr>\r\n");
      out.write("\t         <td align=center width='100'>");
      out.print( dto.getSeq());
      out.write("</td>\r\n");
      out.write("\t         <td><a class= \"subjectA\" href=\"#\" onclick=\"singleBoard('");
      out.print(memId );
      out.write('\'');
      out.write(',');
      out.print(dto.getSeq());
      out.write(',');
      out.print(pg);
      out.write(')');
      out.write('"');
      out.write('>');
      out.print( dto.getSubject());
      out.write("</a></td>\r\n");
      out.write("\t         <td align=center width='100'>");
      out.print( dto.getName());
      out.write("</td>\r\n");
      out.write("\t         ");
if (dateFormat.format(today).equals(dateFormat.format(dto.getLogdate()))) {
      out.write("\r\n");
      out.write("\t      \t   <td align=center width='100'>");
      out.print( timeFormat.format(dto.getLogdate()) );
      out.write("</td>\r\n");
      out.write("\t      \t   \r\n");
      out.write("\t        ");
 }else  {
      out.write("\r\n");
      out.write("\t     \t   <td align=center width='100'>");
      out.print( dto.getLogdate());
      out.write("</td>\r\n");
      out.write("\t        ");
}
      out.write("\r\n");
      out.write("\t         <td align=center width='100'>");
      out.print( dto.getHit());
      out.write("</td>\r\n");
      out.write("\t        </tr>\r\n");
      out.write("\r\n");
      out.write("\t         \r\n");
      out.write("\t\t\t");
} }
      out.write("\r\n");
      out.write("      \r\n");
      out.write("\t         </table>\r\n");
      out.write("\t         \r\n");
      out.write("\t\t\t");
for(int i=1; i<=totalP; i++) {
				if(i==pg){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t<a id=currentPaging href='/memberJSP/board/boardList.jsp?pg=");
      out.print( i);
      out.write('\'');
      out.write('>');
      out.write('[');
      out.print( i);
      out.write("]</a>\r\n");
      out.write("\t\t\t\t");
 }else {
      out.write("\r\n");
      out.write("\t\t\t\t\t<a id=paging href='/memberJSP/board/boardList.jsp?pg=");
      out.print( i);
      out.write('\'');
      out.write('>');
      out.write('[');
      out.print( i);
      out.write("]</a>\r\n");
      out.write("\t");
	}	}
      out.write("\t        \r\n");
      out.write("\t      \r\n");
      out.write("</body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function singleBoard(memId, seq, pg){\r\n");
      out.write("  \tif(memId=='null'){\r\n");
      out.write("  \t\talert(\"먼저 로그인하세요.\");\r\n");
      out.write("  \t}else{\r\n");
      out.write("\t\tlocation.href=\"boardView.jsp?seq=\"+seq+\"&pg=\"+pg;\r\n");
      out.write("  \t}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
